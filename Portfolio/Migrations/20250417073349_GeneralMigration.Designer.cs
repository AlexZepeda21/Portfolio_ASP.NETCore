// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.Data;

#nullable disable

namespace Portfolio.Migrations
{
    [DbContext(typeof(DbPortfolioContext))]
    [Migration("20250417073349_GeneralMigration")]
    partial class GeneralMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Portfolio.Models.Image", b =>
                {
                    b.Property<int>("IdImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageBin")
                        .HasColumnType("LONGBLOB");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("IdImage");

                    b.HasIndex("ProjectId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Portfolio.Models.Project", b =>
                {
                    b.Property<int>("IdProject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasDefaultValue("Agregue una descripción");

                    b.Property<byte[]>("ImageProject")
                        .HasColumnType("LONGBLOB");

                    b.Property<int?>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdProject");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Portfolio.Models.ProjectCategory", b =>
                {
                    b.Property<int>("IdProjectCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("Agregue una descripción");

                    b.Property<byte[]>("ImageCategory")
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdProjectCategory");

                    b.ToTable("ProjectCategory", (string)null);
                });

            modelBuilder.Entity("Portfolio.Models.ProjectTechnology", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ProjectTechnology", (string)null);
                });

            modelBuilder.Entity("Portfolio.Models.Technology", b =>
                {
                    b.Property<int>("IdTechnology")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageIcon")
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("NameTechnology")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdTechnology");

                    b.ToTable("Technology", (string)null);
                });

            modelBuilder.Entity("Portfolio.Models.Image", b =>
                {
                    b.HasOne("Portfolio.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Portfolio.Models.Project", b =>
                {
                    b.HasOne("Portfolio.Models.ProjectCategory", "ProjectCategory")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("Portfolio.Models.ProjectTechnology", b =>
                {
                    b.HasOne("Portfolio.Models.Project", "Project")
                        .WithMany("ProjectTechnologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portfolio.Models.Technology", "Technology")
                        .WithMany("ProjectTechnologies")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Portfolio.Models.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProjectTechnologies");
                });

            modelBuilder.Entity("Portfolio.Models.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Portfolio.Models.Technology", b =>
                {
                    b.Navigation("ProjectTechnologies");
                });
#pragma warning restore 612, 618
        }
    }
}
